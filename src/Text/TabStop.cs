using System.Xml.Linq;
using DXPlus.Internal;

namespace DXPlus;

/// <summary>
/// Specifies a single custom tab stop within a set of custom tab stops
/// applied as part of a set of customized paragraph properties in a document.
/// </summary>
public sealed class TabStop : XElementWrapper, IEquatable<TabStop>
{
    /// <summary>
    /// Specifies the character which shall be used to fill in the space created by a
    /// tab which ends at this custom tab stop. This character shall be repeated
    /// as required to completely fill the tab spacing generated by the tab character.
    /// </summary>
    public TabStopLeader? LeaderType =>
        Xml!.Attribute(Namespace.Main + "leader")
            .TryGetEnumValue<TabStopLeader>(out var result) ? result : null;

    /// <summary>
    /// Specifies the type of custom tab stop, which determines the behavior
    /// of the tab stop and the alignment which shall be applied to text
    /// entered at the current custom tab stop.
    /// </summary>
    public TabStopType? Type => Xml!.Attribute(Name.MainVal).TryGetEnumValue<TabStopType>(out var result) ? result : null;

    /// <summary>
    /// Specifies the position of the current custom tab stop with respect to the current page margins.
    /// Negative values are valid and move the tab stop into the current page margin the specified amount.
    /// </summary>
    public double? Value => double.TryParse(Xml.AttributeValue(Namespace.Main + "pos"), out var result) ? result : null;

    /// <summary>
    /// Internal constructor for existing tab stops
    /// </summary>
    /// <param name="xml"></param>
    /// <exception cref="ArgumentNullException"></exception>
    internal TabStop(XElement xml)
    {
        this.Xml = xml ?? throw new ArgumentNullException(nameof(xml));
    }

    /// <summary>
    /// Returns a tab stop which clears the tab stop at this array position.
    /// </summary>
    public static readonly TabStop Clear = new(TabStopType.Clear, null);

    /// <summary>
    /// Constructor with all parameters
    /// </summary>
    /// <param name="leaderType">Leader type</param>
    /// <param name="type">Tabstop type</param>
    /// <param name="position">Position</param>
    public TabStop(TabStopLeader leaderType, TabStopType type, double? position) : this(type, position)
    {
        Xml!.Add(new XAttribute(Namespace.Main + "leader", leaderType.GetEnumName()));
    }

    /// <summary>
    /// Represents a custom tab stop definition for a paragraph.
    /// </summary>
    /// <param name="type">Type of tab stop</param>
    /// <param name="position">Position in twips (dxa)</param>
    public TabStop(TabStopType type, double? position)
    {
        Xml = new XElement(Namespace.Main + RunTextType.Tab,
            new XAttribute(Name.MainVal, type.GetEnumName()));
        if (position != null)
            Xml.Add(new XAttribute(Namespace.Main + "pos", position));
    }

    /// <summary>
    /// Equality check for tab stops.
    /// </summary>
    /// <param name="other"></param>
    /// <returns></returns>
    public bool Equals(TabStop? other) =>
        other is not null && (ReferenceEquals(this, other) || Xml!.Equals(other.Xml));

    /// <summary>
    /// Equality operator override
    /// </summary>
    /// <param name="obj"></param>
    /// <returns></returns>
    public override bool Equals(object? obj) => ReferenceEquals(this, obj) || obj is TabStop other && Equals(other);

    /// <summary>
    /// GetHashcode override
    /// </summary>
    /// <returns></returns>
    public override int GetHashCode() => Xml!.GetHashCode();
}